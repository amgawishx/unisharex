// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package frame

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type s_buffer struct {
	_tab flatbuffers.Table
}

func GetRootAss_buffer(buf []byte, offset flatbuffers.UOffsetT) *s_buffer {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &s_buffer{}
	x.Init(buf, n+offset)
	return x
}

func Finishs_bufferBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAss_buffer(buf []byte, offset flatbuffers.UOffsetT) *s_buffer {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &s_buffer{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixeds_bufferBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *s_buffer) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *s_buffer) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *s_buffer) Fpath() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *s_buffer) Chkpnt(obj *f_chkpnt) *f_chkpnt {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(f_chkpnt)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *s_buffer) Data(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *s_buffer) DataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *s_buffer) DataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *s_buffer) MutateData(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *s_buffer) Mode() f_mode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return f_mode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *s_buffer) MutateMode(n f_mode) bool {
	return rcv._tab.MutateInt8Slot(10, int8(n))
}

func s_bufferStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func s_bufferAddFpath(builder *flatbuffers.Builder, fpath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(fpath), 0)
}
func s_bufferAddChkpnt(builder *flatbuffers.Builder, chkpnt flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(chkpnt), 0)
}
func s_bufferAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func s_bufferStartDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func s_bufferAddMode(builder *flatbuffers.Builder, mode f_mode) {
	builder.PrependInt8Slot(3, int8(mode), 0)
}
func s_bufferEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
